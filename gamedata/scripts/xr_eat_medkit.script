--[[
************************************************************
					xr_eat_medkit
by Alundaio original by Rulix
************************************************************
--]]
local eating = {}
local enabled = false

function on_game_start()
  local ini = ini_file("ai_tweaks\\xr_eat_medkit.ltx")
  enabled = ini:r_bool_ex("plugin", "enable", false)

  if not (enabled) then
    ini = nil
    return
  end

  RegisterScriptCallback("npc_on_update", npc_update)

  local sect = "plugin"
  eating.ic = ini:r_bool_ex(sect, "in_combat", false)
  eating.oc = ini:r_bool_ex(sect, "out_combat", false)
  eating.max_h = (ini:r_float_ex(sect, "medkit_health") or 50) / 100
  eating.min_b = ini:r_float_ex(sect, "bandage_bleeding") or 0.2
  eating.medkits = alun_utils.parse_list(ini, sect, "medkits")
  eating.bandages = alun_utils.parse_list(ini, sect, "bandages")
  eating.medkit_delay = {}
  eating.bandage_delay = {}
  local ranks = alun_utils.get_rank_list()
  for k, v in ipairs(ranks) do
    eating.medkit_delay[v] = alun_utils.parse_list(ini, v, "medkit_delay")
    eating.bandage_delay[v] = alun_utils.parse_list(ini, v, "bandage_delay")
  end
  ini = nil
end

function npc_update(npc, st)
  if not (enabled) then
    return
  end

  if not (npc:alive()) then
    return
  end

  if not (st.eat_medkit) then
    st.eat_medkit = eat_medkit(npc, st)
  else
    local comm = npc:character_community()
    if (comm == "trader" or comm == "zombied") then
      return
    end

    st.eat_medkit:update(npc)
  end
end

class "eat_medkit"
function eat_medkit:__init(object, storage)
  self.st = storage
  self.rank = ranks.get_obj_rank_name(object)
end

function eat_medkit:update(npc)
  local stage = self.stage or 0
  local new_medkits = eating.medkits
  local new_bandages = eating.bandages

  if (stage == 0) then
    local enemy = npc:best_enemy()
    if (eating.oc and not eating.ic and enemy) or (eating.ic and not eating.oc and not enemy) then
      self.item = nil
      self.timer = nil
      return
    end

    if (npc.health < eating.max_h) then
      for i = 1, #new_medkits do
        local medkit = npc:object(new_medkits[i])
        if (medkit) then
          local d_min = eating.medkit_delay[self.rank][1] or 10000
          local d_max = eating.medkit_delay[self.rank][2] or 15000
          self.timer = time_global() + math.random(d_min, d_max)
          self.item = new_medkits[i]
          self.stage = 1
          return
        end
      end
    end
    if (npc.bleeding > eating.min_b) then
      for i = 1, #new_bandages do
        local bandage = npc:object(new_bandages[i])
        if (bandage) then
          local d_min = eating.bandage_delay[self.rank][1] or 10000
          local d_max = eating.bandage_delay[self.rank][2] or 15000
          self.timer = time_global() + math.random(d_min, d_max)
          self.item = new_bandages[i]
          self.stage = 1
          return
        end
      end
    end
  elseif (stage == 1) then
    if (self.timer and time_global() > self.timer) then
      if (self.item) then
        local med = npc:object(self.item)
        if med then
          consume_medkit(npc, med)
        end
        self.item = nil
      end
      self.stage = 0
    end
  end
end

function consume_medkit(npc, medkit)
  local section = medkit:section()
  npc:eat(medkit)
  local ini = system_ini()
  local time = ini:r_float_ex(section, "boost_time") or 1
  local health_restore = ini:r_float_ex(section, "boost_health_restore") or 0
  local bleeding_restore = ini:r_float_ex(section, "boost_bleeding_restore") or 0
  if (health_restore) then
    npc.health = health_restore * time * 10
  end
  if (bleeding_restore) then
    npc.bleeding = bleeding_restore * time * 10
  end
end
