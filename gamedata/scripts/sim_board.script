--'******************************************************
--'*Registry of smart terrains. The playing field simulation.
-- Edited by Alundaio
--'******************************************************
-------------------
local level, alife, game_graph, math, pairs, tostring, tonumber, tsort, tinsert =
  level,
  alife,
  game_graph,
  math,
  pairs,
  tostring,
  tonumber,
  table.sort,
  table.insert
-------------------
-----------------------------------------------------------------------------------
--						Public
-----------------------------------------------------------------------------------
function general_squad_precondition(squad, target)
  -- duty and freedom target eachother
  --[[
	if (squad.player_id == "dolg") then 
		if (target.player_id == "freedom" or is_squad_monster[target.player_id]) then 
			return in_time_interval(8,19)
		end
	elseif (squad.player_id == "freedom") then 
		if (target.player_id == "dolg") then 
			return in_time_interval(8,19)
		end 
	end
	--]]
  -- if target squad is not monster
  if (is_squad_monster[target.player_id] ~= true) then
    if (squad.player_id == "monster_predatory_day") then
      return in_time_interval(6, 19)
    elseif (squad.player_id == "monster_predatory_night") then
      return in_time_interval(19, 6)
    elseif (squad.player_id == "monster_zombied_day") then
      return in_time_interval(6, 19)
    elseif (squad.player_id == "monster_zombied_night") then
      return in_time_interval(19, 6)
    end
  end
  return false
end

function general_base_precondition(squad, target)
  local need_squads = 0

  if (squad.player_id == "dolg") then
    if (target.faction == "freedom") then
      need_squads = 1
    end
  elseif (squad.player_id == "freedom") then
    if (target.faction == "dolg") then
      need_squads = 1
    end
  elseif (squad.player_id == "army") then
    need_squads = 3
  elseif (squad.player_id == "monolith") then
    need_squads = 1
  elseif (squad.player_id == "stalker" or squad.player_id == "csky") then
    need_squads = 2
  elseif (squad.player_id == "bandit") then
    if (target.faction_controlled and target.faction ~= "bandit") then
      need_squads = 2
    end
  end

  if need_squads > target.max_population then
    need_squads = target.max_population
  end

  if
    (SIMBOARD.smarts[target.id]) and
      (SIMBOARD.smarts[target.id].squads[squad.id] or
        SIMBOARD.smarts[target.id].population < target.max_population and
          SIMBOARD.smarts[target.id].population < need_squads)
   then
    return true
  end

  return in_time_interval(6, 10)
end

function general_territory_precondition(squad, target)
  if (squad.player_id == "monster_predatory_day") then
    return in_time_interval(6, 19)
  elseif (squad.player_id == "monster_predatory_night") then
    return in_time_interval(19, 6)
  elseif (squad.player_id == "monster_zombied_day") then
    return in_time_interval(6, 19)
  elseif (squad.player_id == "monster_zombied_night") then
    return in_time_interval(19, 6)
  elseif (squad.player_id == "monster_vegetarian" or squad.player_id == "zombied") then
    return true
  end
  return in_time_interval(10, 6)
end

function general_resource_precondition(squad, target)
  return in_time_interval(10, 6)
end

function general_lair_precondition(squad, target)
  --[[
	if (squad.player_id == "monster_predatory_day") then 
		return in_time_interval(19,6)
	elseif (squad.player_id == "monster_predatory_night") then 
		return in_time_interval(6,19)
	elseif (squad.player_id == "monster_zombied_day") then 
		return in_time_interval(19,6)
	elseif (squad.player_id == "monster_zombied_night") then 
		return in_time_interval(6,19)
	elseif (squad.player_id == "monster_vegetarian" or squad.player_id == "zombied") then 
		return true
	end 
	return in_time_interval(19,6)
	--]]
  return true -- Will fill up all the lairs first, by monster squads
end

--------------------------------------------------------------------------------------------------------
--					SIMULATION BOARD
--------------------------------------------------------------------------------------------------------

class "simulation_board"
function simulation_board:__init()
  --' smart = {smrt, targets = {}, dangers = {}, squads = {}, stayed_squads = {}}
  self.smarts = {}
  self.smarts_by_names = {}
  self.simulation_started = true
  self.squads = {}
  self.tmp_assigned_squad = {}
end

function simulation_board:register_smart(obj)
  --alun_utils.debug_write(strformat("simulation_board:register_smart %s",obj and obj:name()))
  if self.smarts[obj.id] ~= nil then
    printf("Smart already exist in list [%s]", obj:name())
    return
  end

  --self.smarts[obj.id] = {smrt = obj, squads = {}, stayed_squads = {}, population = 0}
  self.smarts[obj.id] = {smrt = obj, squads = {}, population = 0}
  self.smarts_by_names[obj:name()] = obj
end

function simulation_board:unregister_smart(obj)
  --alun_utils.debug_write(strformat("simulation_board:unregister_smart %s",obj and obj:name()))
  self.smarts[obj.id] = nil
  self.smarts_by_names[obj:name()] = nil
end

function simulation_board:start_sim() -- Doesn't seem to be used in 1.6
  self.simulation_started = true
end

function simulation_board:stop_sim() -- Doesn't seem to be used in 1.6
  self.simulation_started = false
end

function simulation_board:set_actor_community(community)
  ---- Устанавливаем группировку игрока
  db.actor:set_character_community(actor_communitites[community], 0, 0)
end

-- Инициализация смарта
function simulation_board:init_smart(obj)
  --alun_utils.debug_write(strformat("simulation_board:init_smart %s",obj and obj:name()))
  if self.tmp_assigned_squad[obj.id] ~= nil then
    for k, v in pairs(self.tmp_assigned_squad[obj.id]) do
      self:assign_squad_to_smart(v, obj.id)
    end
    self.tmp_assigned_squad[obj.id] = nil
  end
end

-- Создание нового отряда
function simulation_board:create_squad(spawn_smart, sq_id)
  --alun_utils.debug_write(strformat("simulation_board:create_squad spawn_smart=%s sq_id=%s",spawn_smart and spawn_smart:name(),sq_id))
  local squad_id = tostring(sq_id)
  -- if not (system_ini():section_exist(squad_id)) then
  -- printf("squad section does not exist: %s",squad_id)
  -- return
  -- end

  local squad =
    alife():create(squad_id, spawn_smart.position, spawn_smart.m_level_vertex_id, spawn_smart.m_game_vertex_id)
  squad:create_npc(spawn_smart)
  self:assign_squad_to_smart(squad, spawn_smart.id)

  for k in squad:squad_members() do
    local se_obj = k.object or k.id and alife_object(k.id)
    if (se_obj) then
      SIMBOARD:setup_squad_and_group(se_obj)
      -- Alundaio
      SendScriptCallback("squad_on_npc_creation", squad, se_obj, spawn_smart)
    -- Alundaio
    end
  end

  local squadFaction = squad:get_squad_community()

  if squadFaction ~= "trader" and IsSquad(squad) then
    if not (sim_tables.registered_squads[squadFaction]) then
      sim_tables.registered_squads[squadFaction] = {}
    end

    sim_tables.registered_squads[squadFaction][squad.id] = {}
  end

  local new_game_relations = axr_main.config:r_value("character_creation", "new_game_relations", "default")

  if new_game_relations == "all_vs_actor" then
    game_relations.set_squad_actor_relation(squad, -4000)
  elseif new_game_relations == "battle_royale" then
    game_relations.set_squad_actor_relation(squad, 5000)
  end

  return squad
end

-- Удалить отряд
function simulation_board:remove_squad(squad)
  -- utils.debug("simulation_board:remove_squad %s", squad and squad:name())

  self:assign_squad_to_smart(squad, nil)

  squad:remove_squad()
end
--' Назначение отряда в смарт.
function simulation_board:assign_squad_to_smart(squad, smart_id)
  --alun_utils.debug_write(strformat("simulation_board:assign_squad_to_smart %s smart_id=%s",squad and squad:name(),smart_id))

  if (smart_id and self.smarts[smart_id] == nil) then
    if self.tmp_assigned_squad[smart_id] == nil then
      self.tmp_assigned_squad[smart_id] = {}
    end
    table.insert(self.tmp_assigned_squad[smart_id], squad)
    return
  end

  local old_smart_id = squad.smart_id
  squad.smart_id = nil

  -- remove squad from old smart if exist
  if (old_smart_id and self.smarts[old_smart_id] and self.smarts[old_smart_id].squads[squad.id]) then
    self.smarts[old_smart_id].squads[squad.id] = nil

    -- get accurate population count excluding squads using target_smart param
    self.smarts[old_smart_id].population = smart_terrain.smart_terrain_squad_count(SIMBOARD.smarts[old_smart_id].squads)
  end

  if smart_id == nil then
    squad:assign_smart(nil, old_smart_id)
    return
  end

  squad:assign_smart(self.smarts[smart_id].smrt, old_smart_id)

  --' Прописываем отряд в новом смарте.
  if not (self.smarts[smart_id].squads[squad.id]) then
    self.smarts[smart_id].squads[squad.id] = squad
    if not (squad:get_script_target()) then
      -- don't count squads with target_smart
      self.smarts[smart_id].population = self.smarts[smart_id].population + 1
    end
  end
end

local community_groups = {}
-- установить squad и group в соответствии с работой
function simulation_board:setup_squad_and_group(se_obj)
  --alun_utils.debug_write(strformat("simulation_board:setup_squad_and_group %s",obj and obj:name()))
  local squad = get_object_squad(se_obj)
  if not (squad) then
    change_team_squad_group(se_obj, se_obj.team, se_obj.squad, 0)
    return
  end

  local smart = squad.smart_id and alife_object(squad.smart_id)
  change_team_squad_group(se_obj, se_obj.team, smart and smart.squad_id or se_obj.squad, 1)
end

--' Заполнение стартового расположения
function simulation_board:fill_start_position()
  SendScriptCallback("fill_start_position")
end

--' Возвратить смарт по его имени.
function simulation_board:get_smart_by_name(name)
  return self.smarts_by_names[name]
end
--' Возвращает количество отрядов в смарте.
function simulation_board:get_smart_population(smart)
  return self.smarts[smart.id].population
end

--' Получение игрового поля.
function get_sim_board()
  if _G.SIMBOARD == nil then
    _G.SIMBOARD = simulation_board()
  end

  return _G.SIMBOARD
end

function simulation_board:get_squad_target(squad)
  local most_priority_task = nil
  local most_priority_task_prior = nil
  local curr_prior = 0
  local object_registry = simulation_objects.get_sim_obj_registry().objects
  for k, v in pairs(object_registry) do
    curr_prior = -1
    if v.id ~= squad.id and not v.locked == true then
      curr_prior = v:evaluate_prior(squad)
    end
    if
      (curr_prior >= 0 and v:target_precondition(squad)) and
        (most_priority_task_prior == nil or curr_prior > most_priority_task_prior)
     then
      most_priority_task = v
      most_priority_task_prior = curr_prior
    end
  end

  return most_priority_task
end

--' Обнуление списка на создании игры.
function clear()
  _G.SIMBOARD = nil
end
