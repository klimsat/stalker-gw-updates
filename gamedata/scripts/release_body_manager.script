local MIN_RELEASE_DISTANCE = 5000 -- dist*dist away from actor required before releasing
local BODY_MAX_COUNT = 5 -- The max amount of corpses that can exist before checking for releasable corpses.
local STAY_TIME = 108000 -- time corpse exists before removal if body max count and distance is met

local RB_manager = nil
function get_release_body_manager()
  if (RB_manager == nil) then
    RB_manager = Crelease_body()
  end
  return RB_manager
end

local function has_known_info(obj)
  local spawn_ini = obj.spawn_ini and obj:spawn_ini()
  local filename = spawn_ini and spawn_ini:r_string_ex("logic", "cfg")

  local st = db.storage[obj:id()]
  local char_ini = filename and ini_file(filename) or st.ini

  local known_info = st.section_logic and char_ini:r_string_ex(st.section_logic, "known_info") or "known_info"
  if (char_ini and char_ini:section_exist(known_info)) then
    return true
  end

  if (spawn_ini and spawn_ini:section_exist(known_info)) then
    return true
  end

  return false
end

class "Crelease_body"
function Crelease_body:__init()
  self.release_objects_table = {}
  self.keep_items_table = {}
  self.size = 0

  local snd_ini = ini_file("misc\\death_generic.ltx")
  if not snd_ini:section_exist("keep_items") then
    printf("There is no section [keep_items] in death_generic.ltx")
  end
  local n = snd_ini:line_count("keep_items")
  local value = ""
  for i = 0, n - 1 do
    result, section, value = snd_ini:r_line_ex("keep_items", i, "", "")
    self.keep_items_table[section] = true
  end
end

function Crelease_body:can_release(obj)
  if (IsMonster(obj)) then
    return true
  end

  if (has_known_info(obj)) then
    return false
  end

  for k, v in pairs(self.keep_items_table) do
    if (obj:object(k) == true) then
      return false
    end
  end

  return true
end

function Crelease_body:add_corpse(obj)
  local id = obj and obj:id()

  if not (id) then
    return false
  end

  if (self:can_release(obj) ~= true) then
    return false
  end

  if not (self.release_objects_table[id]) then
    self.release_objects_table[id] = true
    self.size = self.size + 1
    return true
  end

  return false
end

function Crelease_body:moving_dead_body(obj, net_spawn)
  if (not net_spawn and self.size > BODY_MAX_COUNT) then
    self:clear()
  end

  self:add_corpse(obj)
end

local safety_time
function Crelease_body:clear(all, dist)
  if not (db.actor) then
    return
  end

  local sim = alife()
  if not (sim) then
    return
  end

  local pos = db.actor:position()
  dist = dist or MIN_RELEASE_DISTANCE

  local cls
  for id, v in pairs(self.release_objects_table) do
    if (all == nil and self.size < BODY_MAX_COUNT) then
      return
    end

    local se_obj = id and id ~= 0 and id ~= 65535 and sim:object(id)
    cls = se_obj and se_obj:clsid()
    if (cls) and (IsStalker(nil, cls) or IsMonster(nil, cls)) and not (se_obj:alive()) then
      if (all) then
        safe_release_manager.release(se_obj)
        self.release_objects_table[id] = nil
        self.size = self.size - 1
      elseif pos:distance_to_sqr(se_obj.position) >= dist then
        local obj = db.storage[id] and db.storage[id].object or level.object_by_id(id)
        if (obj and time_global() - obj:death_time() > STAY_TIME) then
          safe_release_manager.release(se_obj)
          self.release_objects_table[id] = nil
          self.size = self.size - 1
        end
      end
    else
      self.release_objects_table[id] = nil
      self.size = self.size - 1
    end
  end
end

function Crelease_body:release_all()
  utils.debug("Start Crelease_body:release_all")
  local sim = alife()

  for id, v in pairs(self.release_objects_table) do
    local se_obj = id and id ~= 0 and id ~= 65535 and alife_object(id)
    if se_obj then
      -- utils.debug("Crelease_body:release_all, se_obj name: %s online=%s", se_obj:name(), se_obj.online)
      safe_release_manager.release(se_obj)
      self.release_objects_table[id] = nil
      self.size = self.size - 1
    end
  end

  -- for id, vale in pairs(db.storage) do
  -- 	local se_obj = id and id ~= 0 and id ~= 65535 and alife_object(id)
  -- 	-- local on_level = id and id ~= 0 and id ~= 65535 and level.object_by_id(id)
  -- 	-- local npc_level_id = se_obj and se_obj.m_game_vertex_id and game_graph():vertex(se_obj.m_game_vertex_id):level_id()
  -- 	-- local current_level = game_graph():vertex(sim:actor().m_game_vertex_id):level_id()

  -- 	if se_obj and IsStalker(se_obj) and not se_obj:alive() then
  -- 		-- utils.debug("Crelease_body:release_all, se_obj name: %s online=%s", se_obj:name(), se_obj.online)
  -- 		safe_release_manager.release(se_obj)
  -- 		self.release_objects_table[id] = nil
  -- 		self.size = self.size - 1
  -- 	end
  -- end
end

function Crelease_body:save(packet)
end

function Crelease_body:load(reader)
end

local function actor_on_first_update(data)
  get_release_body_manager():release_all()
end

function on_game_start()
  RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end
